# Install and configure Galaxy distribution

---
# Install dependencies
- hosts: '{{ hosts }}'
  tasks:
  - name: Fetch Galaxy dependencies
    yum: name={{ item }} state=present
    with_items:
    - git
    - supervisor
    - python-psycopg2
    register: installed_dependencies

# Set up the Postgres Galaxy user and database
- hosts: '{{ hosts }}'
  become_user: postgres
  vars:
    - galaxy_user: galaxy
    - galaxy_db: galaxy_palfinder
  tasks:
  - name: Create PostgreSQL Galaxy user
    postgresql_user:
      name='{{ galaxy_user }}'
      password='{{ galaxy_user }}'
      role_attr_flags=NOSUPERUSER
      state=present
    when: installed_dependencies | success
    register: postgresql_galaxy_user_created

  - name: Create PostgreSQL Galaxy database
    postgresql_db:
      name='{{ galaxy_db }}'
      owner='{{ galaxy_user }}'
      state=present
    when: postgresql_galaxy_user_created | success
    register: postgresql_galaxy_db_created

# Install and configure Galaxy
- hosts: '{{ hosts }}'
  become_user: galaxy
  vars:
    - galaxy_repo: https://github.com/galaxyproject/galaxy.git
    - galaxy_version: 'v15.10'
    - galaxy_dir: /home/galaxy/galaxies/palfinder
    - galaxy_root: /home/galaxy/galaxies/palfinder/galaxy
    - admin_users: 'admin@galaxy.org'
  tasks:
  - name: Create galaxies directory
    file:
      path='{{ galaxy_dir }}'
      state=directory

  - name: Clone Galaxy source
    git:
      repo='{{ galaxy_repo }}'
      version='{{ galaxy_version }}'
      dest={{ galaxy_root }}
    when: installed_dependencies | success
    register: cloned_source

  - name: Make virtualenv in Galaxy root
    command:
      chdir={{ galaxy_root }}
      /usr/local/bin/virtualenv .venv -p /usr/local/bin/python
      creates='{{ galaxy_root }}/.venv'
    when: cloned_source | success
    register: created_virtualenv

  - name: Create Galaxy configuration file
    command:
      chdir='{{ galaxy_root }}/config'
      cp galaxy.ini.sample galaxy.ini
      creates='{{ galaxy_root }}/config/galaxy.ini'
    when: cloned_source | success
    register: created_config_file

  # See https://wiki.galaxyproject.org/Admin/Config/Performance/ProductionServer#Disable_the_developer_settings
  - name: Disable Galaxy configuration developer settings
    ini_file:
      dest='{{ galaxy_root }}/config/galaxy.ini'
      section='app:main' option={{ item.option }} value={{ item.value }}
    with_items:
    - { option: 'debug', value: 'False' }
    - { option: 'use_interactive', value: 'False' }
    when: created_config_file | success
    register: disabled_developer_settings

    # See https://wiki.galaxyproject.org/Admin/Config/Performance/ProductionServer#Switching_to_a_database_server
  - name: Configure Galaxy database connection
    ini_file:
      dest='{{ galaxy_root }}/config/galaxy.ini'
      section='app:main'
      option='database_connection'
      value='postgres://galaxy:galaxy@localhost:5432/galaxy_palfinder'
    when: created_config_file | success
    register: configured_database_connection

  # Set other configuration options
  - name: General Galaxy configuration
    ini_file:
      dest='{{ galaxy_root }}/config/galaxy.ini'
      section='app:main' option={{ item.option }} value={{ item.value }}
    with_items:
    - { option: 'brand', value: 'Microsat' }
    - { option: 'admin_users', value: '{{ admin_users }}' }
    - { option: 'allow_user_dataset_purge', value: 'True' }
    - { option: 'require_login', value: 'True' }
    - { option: 'allow_user_impersonation', value: 'True' }
    - { option: 'enable_quotas', value: 'True' }
    when: created_config_file | success
    register: configured_general_settings

  - name: Run common_startup.sh to initialise sample files and eggs/wheels
    command:
      chdir='{{ galaxy_root }}'
      scripts/common_startup.sh
    when: configured_general_settings | success
    register: done_common_startup

  - name: Run create_db.py to initialise the database
    command:
      chdir='{{ galaxy_root }}'
      .venv/bin/python scripts/create_db.py
    when: done_common_startup | success
    register: initialised_database

# Configure Nginx proxying
# See https://wiki.galaxyproject.org/Admin/Config/nginxProxy
- hosts: '{{ hosts }}'
  vars:
    - galaxy_root: /home/galaxy/galaxies/palfinder/galaxy
  tasks:
  - name: Check if default Nginx configuration is present
    stat: path=/etc/nginx/conf.d/default.conf
    register: nginx_default_conf

  - name: Move default Nginx configuration
    command: mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak
    when: nginx_default_conf.stat.exists

  # Create galaxy.conf file and put into Nginx conf.d/
  - name: Configure Nginx proxy
    template:
      dest=/etc/nginx/conf.d/galaxy.conf
      src=nginx-galaxy.conf.j2
    notify:
    - Restart Nginx

  # Required to allow Nginx to read static content
  # from Galaxy's home directory
  - name: Add Nginx user to galaxy group
    user:
      name=nginx
      groups='nginx,galaxy'
    notify:
    - Restart Nginx

  handlers:
  - name: Restart Nginx
    service: name=nginx state=reloaded
