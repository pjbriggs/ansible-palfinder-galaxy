# Install and configure Galaxy distribution

---
# Install dependencies
- hosts: '{{ hosts }}'
  tasks:
  - name: Install Galaxy dependencies
    yum: name={{ item }} state=present
    with_items:
    - git
    - python-psycopg2
    - libtool
    - libtool-ltdl
    - libtool-ltdl-devel
    - java-1.8.0-openjdk
    - samtools
    register: installed_dependencies

# Set up the Postgres Galaxy user and database
- hosts: '{{ hosts }}'
  become_user: postgres
  vars:
    - galaxy_user: galaxy
    - galaxy_db: galaxy_palfinder
  tasks:
  - name: Create PostgreSQL Galaxy user
    postgresql_user:
      name='{{ galaxy_user }}'
      password='{{ galaxy_user }}'
      role_attr_flags=NOSUPERUSER
      state=present
    when: installed_dependencies | success
    register: postgresql_galaxy_user_created

  - name: Create PostgreSQL Galaxy database
    postgresql_db:
      name='{{ galaxy_db }}'
      owner='{{ galaxy_user }}'
      state=present
    when: postgresql_galaxy_user_created | success
    register: postgresql_galaxy_db_created

# Install and configure Galaxy
- hosts: '{{ hosts }}'
  become_user: galaxy
  vars:
    - galaxy_repo: https://github.com/galaxyproject/galaxy.git
    - galaxy_version: 'v16.01'
    - galaxy_dir: /home/galaxy/galaxies/palfinder
    - galaxy_root: /home/galaxy/galaxies/palfinder/galaxy
    - galaxy_ftp_upload_dir: /home/galaxy/galaxies/ftp_uploads
    - galaxy_ftp_upload_site: ftp://localhost:2121
    - admin_users: 'admin@galaxy.org'
  tasks:
  - name: Create Galaxy directories
    file:
      path='{{ item }}'
      state=directory
    with_items:
    - '{{ galaxy_dir }}'
    - '{{ galaxy_dir }}/tool_dependencies'
    - '{{ galaxy_ftp_upload_dir }}'
    - '{{ galaxy_dir }}/logs'

  - name: Clone Galaxy source
    git:
      repo='{{ galaxy_repo }}'
      version='{{ galaxy_version }}'
      dest={{ galaxy_root }}
    when: installed_dependencies | success
    register: cloned_source

  - name: Make virtualenv in Galaxy root
    command:
      chdir={{ galaxy_root }}
      /usr/local/bin/virtualenv .venv -p /usr/local/bin/python
      creates='{{ galaxy_root }}/.venv'
    when: cloned_source | success
    register: created_virtualenv

  - name: Create Galaxy configuration file
    command:
      chdir='{{ galaxy_root }}/config'
      cp galaxy.ini.sample galaxy.ini
      creates='{{ galaxy_root }}/config/galaxy.ini'
    when: cloned_source | success
    register: created_config_file

  # See https://wiki.galaxyproject.org/Admin/Config/Performance/ProductionServer#Disable_the_developer_settings
  - name: Disable Galaxy configuration developer settings
    ini_file:
      dest='{{ galaxy_root }}/config/galaxy.ini'
      section='app:main' option={{ item.option }} value={{ item.value }}
    with_items:
    - { option: 'debug', value: 'False' }
    - { option: 'use_interactive', value: 'False' }
    when: created_config_file | success
    register: disabled_developer_settings

  # See https://wiki.galaxyproject.org/Admin/Config/Performance/ProductionServer#Switching_to_a_database_server
  - name: Configure Galaxy database connection
    ini_file:
      dest='{{ galaxy_root }}/config/galaxy.ini'
      section='app:main'
      option='database_connection'
      value='postgres://galaxy:galaxy@localhost:5432/galaxy_palfinder'
    when: created_config_file | success
    register: configured_database_connection

  - name: Configure Galaxy FTP upload settings
    ini_file:
      dest='{{ galaxy_root }}/config/galaxy.ini'
      section='app:main' option={{ item.option }} value={{ item.value }}
    with_items:
    - { option: 'ftp_upload_dir', value: '{{ galaxy_ftp_upload_dir }}' }
    - { option: 'ftp_upload_site', value: '{{ galaxy_ftp_upload_site }}' }
    when: created_config_file | success
    register: configured_ftp_settings

  # Set other configuration options
  - name: General Galaxy configuration
    ini_file:
      dest='{{ galaxy_root }}/config/galaxy.ini'
      section='app:main' option={{ item.option }} value={{ item.value }}
    with_items:
    - { option: 'brand', value: 'Microsat' }
    - { option: 'admin_users', value: '{{ admin_users }}' }
    - { option: 'allow_user_dataset_purge', value: 'True' }
    - { option: 'require_login', value: 'True' }
    - { option: 'allow_user_impersonation', value: 'True' }
    - { option: 'enable_quotas', value: 'True' }
    - { option: 'tool_dependency_dir', value: '../tool_dependency_dir' }
    when: created_config_file | success
    register: configured_general_settings

  - name: Run common_startup.sh to initialise sample files and eggs/wheels
    command:
      chdir='{{ galaxy_root }}'
      scripts/common_startup.sh
    when: configured_general_settings | success
    register: done_common_startup

  - name: Run create_db.py to initialise the database
    command:
      chdir='{{ galaxy_root }}'
      .venv/bin/python scripts/create_db.py
    when: done_common_startup | success
    register: initialised_database

# Configure regular clean up of deleted/purged data
# https://wiki.galaxyproject.org/Admin/Config/Performance/Purge%20Histories%20and%20Datasets
- hosts: '{{ hosts }}'
  vars:
    - galaxy_dir: /home/galaxy/galaxies/palfinder
    - galaxy_root: /home/galaxy/galaxies/palfinder/galaxy
    - galaxy_ftp_upload_dir: /home/galaxy/galaxies/ftp_uploads
  tasks:
  - name: Set up cron jobs to purge deleted data
    cron:
      user=galaxy
      name={{ item.name }}
      job="sh {{ galaxy_root }}/scripts/cleanup_datasets/{{ item.script }}"
      weekday=00 hour=03 minute=00
      state=present
    with_items:
    - { name: 'Delete userless histories', script: 'delete_userless_histories.sh' }
    - { name: 'Purge histories', script: 'purge_histories.sh' }
    - { name: 'Purge libraries', script: 'purge_libraries.sh' }
    - { name: 'Purge folders', script: 'purge_folders.sh' }
    - { name: 'Purge datasets', script: 'purge_datasets.sh' }

  - name: Set up cron jobs to clean up FTP area
    cron:
      user=galaxy
      name="Delete old FTP files"
      job="find {{ galaxy_ftp_upload_dir }} -mindepth 2  -mtime +5 -exec rm -rf {} \;"
      hour=00 minute=00
      state=present

# Set up log rotation of Galaxy logs
# See https://wiki.galaxyproject.org/Admin/Config/Performance/ProductionServer#Rotate_log_files
  # Create galaxy.conf file and put into Nginx conf.d/
  - name: Rotate Galaxy log files
    template:
      dest=/etc/logrotate.d/galaxy
      src=logrotate-galaxy.j2

# Configure Nginx proxying
# See https://wiki.galaxyproject.org/Admin/Config/nginxProxy
- hosts: '{{ hosts }}'
  vars:
    - galaxy_root: /home/galaxy/galaxies/palfinder/galaxy
  tasks:
  - name: Check if default Nginx configuration is present
    stat: path=/etc/nginx/conf.d/default.conf
    register: nginx_default_conf

  - name: Move default Nginx configuration
    command: mv /etc/nginx/conf.d/default.conf /etc/nginx/conf.d/default.conf.bak
    when: nginx_default_conf.stat.exists

  # Create galaxy.conf file and put into Nginx conf.d/
  - name: Configure Nginx proxy
    template:
      dest=/etc/nginx/conf.d/galaxy.conf
      src=nginx-galaxy.conf.j2
    notify:
    - Restart Nginx

  # Required to allow Nginx to read static content
  # from Galaxy's home directory
  - name: Add Nginx user to galaxy group
    user:
      name=nginx
      groups='nginx,galaxy'
    notify:
    - Restart Nginx

  handlers:
  - name: Restart Nginx
    service: name=nginx state=reloaded

# Set up Postgresql Galaxy FTP user
# NB do this after populating the database
- hosts: '{{ hosts }}'
  become_user: postgres
  vars:
    - galaxy_db: galaxy_palfinder
    - galaxy_ftp_user: galaxy_ftp
  tasks:
  - name: Create PostgreSQL Galaxy FTP user
    postgresql_user:
      name='{{ galaxy_ftp_user }}'
      password='{{ galaxy_ftp_user }}'
      role_attr_flags=NOSUPERUSER
      state=present
    when: initialised_database | success
    register: postgresql_galaxy_ftp_user_created

  - name: Assign privileges for Galaxy FTP user
    postgresql_privs:
      database='{{ galaxy_db }}'
      roles='{{ galaxy_ftp_user }}'
      priv='SELECT'
      type='table'
      objs='galaxy_user'
      state=present
    when: postgresql_galaxy_ftp_user_created | success

# Configure ProFTPd for FTP upload
- hosts: '{{ hosts }}'
  vars:
    - galaxy_ftp_upload_dir: /home/galaxy/galaxies/ftp_uploads
    - galaxy_db: galaxy_palfinder
    - galaxy_ftp_user: galaxy_ftp
    - galaxy_ftp_password: galaxy_ftp
  tasks:
  - name: Check if default ProFTPd configuration is present
    stat: path=/usr/local/etc/proftpd.conf
    register: proftpd_default_conf

  - name: Move default ProFTPd configuration
    command: mv /usr/local/etc/proftpd.conf /usr/local/etc/proftpd.conf.bak
    when: proftpd_default_conf.stat.exists

  # Create proftpd-galaxy.conf file
  - name: Configure ProFTPd for Galaxy
    template:
      dest=/usr/local/etc/proftpd-galaxy.conf
      src=proftpd-galaxy.conf.j2
    register: created_proftpd_conf

  # Set up as a service
  - name: Create init.d script for ProFTPd
    copy:
      dest=/etc/init.d/proftpd
      src=proftpd.init.sh
      mode='ugo+x'
    when: created_proftpd_conf | success
    register: created_proftpd_init

  - name: Start ProFTPd service
    service:
      name=proftpd
      enabled=on
      state=started
    when: created_proftpd_init | success

# Install and configure uWSGI and set up handlers
# See https://wiki.galaxyproject.org/Admin/Config/Performance/Scaling#uWSGI
- hosts: '{{ hosts }}'
  become_user: galaxy
  vars:
    - galaxy_repo: https://github.com/galaxyproject/galaxy.git
    - galaxy_version: 'v15.10'
    - galaxy_dir: /home/galaxy/galaxies/palfinder
    - galaxy_root: /home/galaxy/galaxies/palfinder/galaxy
    - galaxy_ftp_upload_dir: /home/galaxy/galaxies/ftp_uploads
    - galaxy_ftp_upload_site: ftp://localhost:2121
    - admin_users: 'admin@galaxy.org'
  tasks:
  - name: Install uWSGI and PasteDeploy
    pip:
      name={{ item }}
      executable='{{ galaxy_root }}/.venv/bin/pip'
      extra_args='--no-binary :all:'
      state=present
    with_items:
    - uwsgi
    - uwsgitop
    - PasteDeploy
    register: uwsgi_installed

  - name: Configure Galaxy uWSGI settings
    ini_file:
      dest='{{ galaxy_root }}/config/galaxy.ini'
      section='uwsgi' option={{ item.option }} value={{ item.value }}
    with_items:
    - { option: 'processes', value: '8' }
    - { option: 'stats', value: '127.0.0.1:9191' }
    - { option: 'socket', value: '127.0.0.1:4001' }
    - { option: 'pythonpath', value: 'lib' }
    - { option: 'threads', value: '4' }
    - { option: 'logto', value: '{{ galaxy_dir }}/logs/uwsgi.log' }
    - { option: 'master', value: 'True' }
    when: uwsgi_installed | success
    register: configured_uwsgi_settings

  - name: Configure Galaxy uWSGI settings in app-main
    ini_file:
      dest='{{ galaxy_root }}/config/galaxy.ini'
      section='app:main' option={{ item.option }} value={{ item.value }}
    with_items:
    - { option: 'static_enabled', value: 'False' }
    - { option: 'track_jobs_in_database', value: 'True' }
    when: configured_uwsgi_settings | success
    register: configured_uwsgi_app_main_settings

  - name: Configure Galaxy handler processes
    ini_file:
      dest='{{ galaxy_root }}/config/galaxy.ini'
      section='server:handler0' option={{ item.option }} value={{ item.value }}
    with_items:
    - { option: 'use', value: 'egg:Paste#http' }
    - { option: 'port', value: '8090' }
    - { option: 'host', value: '127.0.0.1' }
    - { option: 'use_threadpool', value: 'true' }
    - { option: 'threadpool_workers', value: '5' }
    when: configured_uwsgi_app_main_settings | success
    register: configured_galaxy_handlers

  # See https://wiki.galaxyproject.org/Admin/Config/Jobs
  - name: Set up Galaxy job_conf file
    template:
      dest='{{ galaxy_root }}/config/job_conf.xml'
      src=job_conf.xml.j2

# Set up Supervisor config for Galaxy
# See https://wiki.galaxyproject.org/Admin/Config/Performance/Scaling#Starting_and_Stopping
- hosts: '{{ hosts }}'
  vars:
    - galaxy_root: /home/galaxy/galaxies/palfinder/galaxy
  tasks:
  - name: Set up Galaxy supervisord conf file
    template:
      dest='/usr/local/etc/supervisord.d/galaxy.ini'
      src=supervisord-galaxy.ini.j2
    notify:
    - Restart Supervisord

  handlers:
  - name: Restart Supervisord
    service: name=supervisord state=reloaded
