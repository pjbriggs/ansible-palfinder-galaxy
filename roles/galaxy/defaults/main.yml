---
# Name for Galaxy instance
galaxy_name: "palfinder"
galaxy_version: 'release_22.01'

# User running Galaxy service
galaxy_user: "galaxy"
galaxy_group: "{{ galaxy_user }}"

# Base Galaxy admin user
galaxy_admin_user: "admin@galaxy.org"

# Additional admin users
# If defined then should be a list e.g.
# galaxy_extra_admins:
#   - "foo@example.org"
#   - "bar@example.org"
galaxy_extra_admins: null

# Postgresql database
galaxy_db: "galaxy_{{ galaxy_name }}"
galaxy_db_user: "{{ galaxy_user }}"
galaxy_db_password: "{{ galaxy_db_user }}"

# Web server
galaxy_server_name: "galaxy.example.org"
galaxy_id_secret:
galaxy_http_port: 8080

# Proxy prefix
# Leave blank for no prefix, otherwise must start
# with a forward slash e.g. "/galaxy"
galaxy_proxy_prefix:

# Welcome page template and static content
galaxy_welcome_template: "welcome.html.j2"
galaxy_terms:
galaxy_citations:

# Generate user-accessible "status" page
galaxy_generate_status_page: no

# Environment setup file
galaxy_environment_setup_file:

# Preserve Python environment
# - 'legacy_only' (default) preserves Python env for
#    legacy tools only
# - 'legacy_and_local' for legacy and locally managed tools
# - 'always' for all tools (may break conda dependencies)
galaxy_preserve_python_env: "legacy_only"

# (S)CSS styles/custom colours
# Define entries as a dictionary with:
# - var   (SCSS variable e.g. 'brand-primary')
# - value (Value e.g. 'red', '#660099')
galaxy_custom_scss: null

# Message of the day
# This message will be displayed under the masthead
# on the Galaxy site
galaxy_message:

# HTTPS parameters
enable_https: no
ssl_certificate: "/etc/ssl/certs/{{ galaxy_server_name }}"
ssl_certificate_key: "/etc/ssl/certs/{{ galaxy_server_name }}"

# Additional location entries in nginx config
# Define entries as a dictionary with:
# - location
# - alias
# - add_header (optional)
galaxy_nginx_extra_locations:

# Additional static content
# Define entries as a dictionary with:
# - src (file to be uploaded)
# - dest (target location)
# - link (option, also make a link to dest)
galaxy_extra_static_content:

# Galaxy source code
galaxy_repo: https://github.com/galaxyproject/galaxy.git

# Galaxy installation directories
galaxy_install_dir: "/home/galaxy/galaxies"
galaxy_dir: "{{ galaxy_install_dir }}/{{ galaxy_name }}"
galaxy_clone_dir: "galaxy"
galaxy_root: "{{ galaxy_dir }}/{{ galaxy_clone_dir }}"
galaxy_tool_dependency_dir: '{{ galaxy_dir }}/tool_dependencies'
galaxy_database_dir: '{{ galaxy_root }}/database'

# Files and working directories
galaxy_job_working_dir: "{{ galaxy_database_dir }}/jobs_directory"
galaxy_file_path: "{{ galaxy_database_dir }}/files"
galaxy_new_file_path: "{{ galaxy_database_dir }}/tmp"

# Database SQL file
# Set to a pg_dump SQL file from a previous Galaxy DB
# to reload data from that DB
# NB only used when creating a new DB (will not overwrite
# an existing database)
galaxy_new_db_sql:

# Tool data locations
galaxy_tool_data_path: "{{ galaxy_root }}/tool-data"
galaxy_shed_tool_data_path: "{{ galaxy_tool_data_path }}"
galaxy_data_manager_data_path: "{{ galaxy_tool_data_path }}"

# Python for Galaxy
galaxy_python_version: "3.6.11"
galaxy_python_dir: '{{ galaxy_dir }}/python/{{ galaxy_python_version }}'
galaxy_force_reinstall_python: no

# Temporary directory to use during installation
galaxy_installation_tmp_dir: "/tmp"

# Remove compiled mako templates?
# This might be necessary when upgrading to a new
# Galaxy release and/or Python version
galaxy_remove_mako_templates: yes

# Toolshed check
enable_tool_shed_check: no

# Virtualenv options
galaxy_force_reinstall_venv: no

# Conda options
galaxy_reinstall_conda: no
galaxy_conda_auto_install: yes
galaxy_conda_use_mamba: no

# Dependency caching options
galaxy_use_cached_depedency_manager: no

# User account creation and activation
allow_user_creation: yes
allow_user_deletion: yes
allow_user_impersonation: yes
enable_user_activation: no

# User login
enable_require_login: no

# Quotas
enable_quotas: no

# Tool conf XML file
galaxy_tool_conf_file:

# How to handle clean up of artefacts left on the
# filesystem after job completion
# Should be 'always', 'onsuccess', or 'never'
galaxy_cleanup_job: "always"

# Number of days before artefacts in job working
# directory are removed by cron jobs
galaxy_clean_up_cron_interval: 28

# Allow admins to paste filesystem paths during upload
galaxy_allow_path_paste: no

# Tool data tables
# Define table entries as a dictionary with:
# - description (free text, inserted into comment)
# - name        (table name)
# - columns     (table columns as comma-separated values)
# - file_path   (path to .loc file relative to galaxy_root)
galaxy_tool_data_tables:

# Chromosome length files (.len)
# Should be a list of file names e.g. 'hg38.len'
galaxy_chromosome_len_files:

# Job runners
enable_drmaa: no
enable_jse_drop: no
galaxy_default_runner: "local"

# JSE-drop defaults
galaxy_jse_drop_galaxy_id: "{{ galaxy_name }}"
galaxy_jse_drop_dir: "{{ galaxy_dir }}/jse-drop"
galaxy_jse_drop_virtual_env: "{{ galaxy_root }}/.venv"
# Grace period after which files from deleted jobs
# can be removed (seconds)
galaxy_jse_drop_cleanup_grace_period: "300"

# Job destinations
# Define entries as a dictionary with:
# - id     (destination ID)
# - runner (target runner)
# - jse_drop_qsub_options (optional, JSE-drop 'qsub_options')
# - jse_drop_slots (optional, JSE-drop 'galaxy_slots')
# - envs (optional dictionary defining <env...> elements, see below)
# - user_concurrent_jobs (optional; sets maximum number of concurrent
#                         jobs per user for this destination)
# - total_concurrent_jobs (optional; sets total maximum number of
#                          concurrent jobs for this destination))
# 'envs' should be a dictionary with:
# - id     (ID for env element)
# - value  (corresponding env value)
galaxy_job_destinations:

# Tool destinations
# Define entries as a dictionary with:
# - id          (tool ID/name)
# - destination (target destination)
galaxy_tool_destinations:

# Dependency resolvers
# Define entries as a dictionary with:
# - type        (required; one of 'tool_shed_packages', 'galaxy_packages',
#                'conda')
# - versionless (optional; sets 'versionless' attribute to 'true' or 'false')
# - base_path   (optional; sets 'base_path' attribute)
galaxy_dependency_resolvers:
  - type: 'tool_shed_packages'
  - type: 'galaxy_packages'
  - type: 'galaxy_packages'
    versionless: 'true'
  - type: 'conda'
  - type: 'conda'
    versionless: 'true'

# Limits for number of concurrent running jobs
galaxy_registered_user_concurrent_jobs: 2
galaxy_unregistered_user_concurrent_jobs: 0
galaxy_concurrent_jobs: 2

# HTML sanitization whitelist
galaxy_sanitize_whitelist_file: "sanitize_allowlist.txt"
# List of paths for whitelisted tools e.g.
# galaxy_sanitize_whitelist_tools:
# - "toolshed.g2.bx.psu.edu/repos/devteam/fastqc/fastqc/0.72"
# - ...
galaxy_sanitize_whitelist_tools:

# nginx configuration
nginx_client_body_temp_path: "/tmp/nginx"
nginx_client_max_body_size: "10G"
nginx_service: "nginx"
nginx_user: "nginx"
nginx_group: "nginx"
nginx_conf_dir: "/etc/nginx"
nginx_share_dir: "/usr/share/nginx"

# Gunicorn configuration
galaxy_gunicorn_workers: 4
galaxy_gunicorn_socket: 4001
galaxy_reports_gunicorn_socket: 9001

# uWSGI configuration
galaxy_reports_uwsgi_socket: 9001

# Logging
galaxy_log_dir: "{{ galaxy_dir }}/logs"
enable_log_rotation: yes

# Outgoing mail notification settings
enable_smtp: no
galaxy_smtp_server: "localhost:25"
galaxy_outgoing_email_addr: "Galaxy {{ galaxy_name }} <galaxy-no-reply@{{ galaxy_server_name  }}>"
galaxy_incoming_email_addr: "None"

# Reporting interface
enable_reports: no
galaxy_reports_htpasswd: "/etc/nginx/galaxy-reports.htpasswd"
galaxy_reports_user: "galaxyreports"
galaxy_reports_password: "{{ galaxy_reports_user }}"

# Location to install galaxy utilities
# Utilities should be installed under the 'bin' subdirectory
# of this location
galaxy_utils_dir: "/usr/local"

# Enable authenticated users to see names of other users
# (useful for sharing in small Galaxy instances)
expose_user_name: no

# GDPR Compliance mode
enable_beta_gdpr: no
