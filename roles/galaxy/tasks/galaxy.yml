# Install and configure Galaxy
---
- name: "Report Galaxy version being installed"
  debug:
    msg: "Installing Galaxy version '{{ galaxy_version }}'"

- name: Create top-level Galaxy directories
  file:
    path='{{ item }}'
    state=directory
  with_items:
  - '{{ galaxy_dir }}'
  - '{{ galaxy_tool_dependency_dir }}'
  - '{{ galaxy_ftp_upload_dir }}'
  - '{{ galaxy_dir }}/logs'
  - '{{ galaxy_dir }}/backups'

- name: "Stop if proxy prefix is set but is missing leading slash"
  fail:
    msg: "'galaxy_proxy_prefix' is missing a leading slash (currently set to '{{ galaxy_proxy_prefix }}')"
  when:
    - galaxy_proxy_prefix|default(None) != None
    - galaxy_proxy_prefix is not regex("^/.*")

- name: Set Galaxy URL
  set_fact:
    galaxy_url: "{{ 'https' if enable_https else 'http' }}://{{ galaxy_server_name }}{{ galaxy_proxy_prefix }}/"

- name: "Clone Galaxy source"
  git:
    repo: '{{ galaxy_repo }}'
    version: '{{ galaxy_version }}'
    dest: '{{ galaxy_root }}'
    force: yes
  environment:
    PATH: '/usr/local/bin:{{ ansible_env.PATH }}'

- name: Create additional Galaxy directories
  file:
    path='{{ item }}'
    state=directory
  with_items:
  - '{{ galaxy_file_path }}'

- name: Create welcome page
  template:
    dest='{{ galaxy_root }}/static/welcome.html'
    src='{{ galaxy_welcome_template }}'

- name: Import terms and conditions page
  copy:
    src='{{ galaxy_terms }}'
    dest='{{ galaxy_root }}/static/terms.html'
  when: galaxy_terms|default(None) != None

- name: Import citations page
  copy:
    src='{{ galaxy_citations }}'
    dest='{{ galaxy_root }}/static/citations.html'
  when: galaxy_citations|default(None) != None

- name: "Set up custom colours in SCSS file"
  replace:
    path: '{{ galaxy_root }}/client/src/style/scss/theme/blue.scss'
    regexp: "^\\$({{ item.var }}): (.*);"
    replace: "${{ item.var }}: {{ item.value }};"
  with_items: "{{ galaxy_custom_scss }}"
  when: galaxy_custom_scss|default(None) != None

- name: "Determine Python executable for setting up virtualenev"
  set_fact:
    python_exe: "{{ galaxy_python_dir }}/bin/python{{ galaxy_python_version.split('.')[:2] | join('.') }}"

- name: "Check if Galaxy virtualenv already exists"
  stat:
    path: "{{ galaxy_root }}/.venv"
  register: galaxy_venv

- name: "Deal with existing virtualenv in Galaxy root"
  block:
    - name: "Get external Python version"
      shell:
        "{{ python_exe }} --version"
      register: external_python_version

    - name: "Get virtualenv Python version"
      shell:
        "{{ galaxy_root }}/.venv/bin/python --version"
      register: venv_python_version

    - name: "Report Python versions"
      debug:
        msg: "Python: external version {{ external_python_version.stdout }}, venv version {{ venv_python_version.stdout }}"

    - name: "Remove existing virtualenv from Galaxy root"
      file:
        path: '{{ galaxy_root }}/.venv'
        state: absent
      when: venv_python_version.stdout != external_python_version.stdout
  when: galaxy_venv.stat.exists

- name: "Remove futures from pinned-requirements.txt"
  lineinfile:
    path: '{{ galaxy_root }}/lib/galaxy/dependencies/pipfiles/default/pinned-requirements.txt'
    state: absent
    line: "futures==3.1.1"
  when: galaxy_version == "release_20.09"

- name: "Change pydantic version to 1.10 in pinned-requirements.txt (release_21.05)"
  lineinfile:
    path: '{{ galaxy_root }}/lib/galaxy/dependencies/pinned-requirements.txt'
    search_string: "pydantic==1.7.3;"
    state: present
    line: 'pydantic==1.10; python_version >= "3.6" and python_version < "4.0"'
  when: galaxy_version == "release_21.05"

- name: "Make virtualenv in Galaxy root"
  command:
    chdir: '{{ galaxy_root }}'
    cmd: "{{ galaxy_python_dir }}/bin/virtualenv .venv -p {{ python_exe }}"
    creates: '{{ galaxy_root }}/.venv'

- name: "Check if conda is already installed"
  stat:
    path: "{{ galaxy_tool_dependency_dir }}/_conda/bin/conda"
  register: galaxy_conda

- name: "Prepare for reinstallation of conda"
  block:
    - name: "Move existing conda environments directory"
      shell:
        "test -d {{ galaxy_tool_dependency_dir }}/_conda/envs && test ! -d {{ galaxy_tool_dependency_dir }}/conda_envs.bak && mv {{ galaxy_tool_dependency_dir }}/_conda/envs {{ galaxy_tool_dependency_dir }}/conda_envs.bak"

    - name: "Move existing conda packages directory"
      shell:
        "test -d {{ galaxy_tool_dependency_dir }}/_conda/pkgs && test ! -d {{ galaxy_tool_dependency_dir }}/conda_pkgs.bak && mv {{ galaxy_tool_dependency_dir }}/_conda/pkgs {{ galaxy_tool_dependency_dir }}/conda_pkgs.bak"

    - name: "Remove existing conda installation"
      file:
        path: '{{ galaxy_tool_dependency_dir }}/_conda'
        state: absent
  when: galaxy_conda.stat.exists == True and galaxy_reinstall_conda == True

- name: "Install conda"
  block:
    # See https://docs.conda.io/en/latest/miniconda.html#linux-installers
    - name: "Fetch Miniconda installer"
      get_url:
        url: 'https://repo.anaconda.com/miniconda/Miniconda3-py37_4.12.0-Linux-x86_64.sh'
        dest: '{{ galaxy_tool_dependency_dir }}/miniconda.sh'
        force: true

    - name: "Install conda using Miniconda"
      command:
        "bash {{ galaxy_tool_dependency_dir }}/miniconda.sh -b -p {{ galaxy_tool_dependency_dir }}/_conda"

    - name: "Remove Miniconda installer"
      file:
        path: '{{ galaxy_tool_dependency_dir }}/miniconda.sh'
        state: absent
  when: galaxy_conda.stat.exists == False or galaxy_reinstall_conda == True

- name: "Reinstate old conda environments and packages"
  block:
    - name: "Reinstate old conda environments"
      shell:
        "test -d {{ galaxy_tool_dependency_dir }}/conda_envs.bak && rmdir {{ galaxy_tool_dependency_dir }}/_conda/envs && mv {{ galaxy_tool_dependency_dir }}/conda_envs.bak {{ galaxy_tool_dependency_dir }}/_conda/envs"

    - name: "Reinstate old conda packages"
      shell:
        "test -d {{ galaxy_tool_dependency_dir }}/conda_pkgs.bak && rm -rf {{ galaxy_tool_dependency_dir }}/_conda/pkgs && mv {{ galaxy_tool_dependency_dir }}/conda_pkgs.bak {{ galaxy_tool_dependency_dir }}/_conda/pkgs"

    - name: "Update the reinstated packages"
      shell:
        "{{ galaxy_tool_dependency_dir }}/_conda/bin/conda update -y --all"
  when: galaxy_conda.stat.exists == True and galaxy_reinstall_conda == True

- name: "Use mamba to resolve conda dependencies"
  block:
    - name: "Check if mamba is already installed"
      stat:
        path: '{{ galaxy_tool_dependency_dir }}/_conda/bin/mamba'
      register: mamba

    - name: "Install mamba into conda base environment"
      shell:
        "{{ galaxy_tool_dependency_dir }}/_conda/bin/conda install -y mamba -n base -c conda-forge"
      when: mamba.stat.exists == False
  when: galaxy_conda_use_mamba == True

- name: "Add environment setup file"
  copy:
    dest='{{ galaxy_dir }}/environment_setup.sh'
    src='{{ galaxy_environment_setup_file }}'
  when: galaxy_environment_setup_file|default(None) != None

- name: Create Galaxy configuration file
  template:
    dest='{{ galaxy_root }}/config/galaxy.yml'
    src=galaxy-config.yml.j2

# Deal with possible bug when Galaxy installs Mercurial in
# the virtualenv without execute permission
- name: "Check for Galaxy Mercurial"
  stat:
    path: '{{ galaxy_root }}/.venv/bin/hg'
  register: galaxy_hg
  become: yes
  become_user: "{{ galaxy_user }}"

- name: "Add execute permission to Galaxy Mercurial"
  file:
    path='{{ galaxy_root }}/.venv/bin/hg'
    state='file'
    mode='u+rwx,go+rx'
  become: yes
  become_user: "{{ galaxy_user }}"
  when:
    - galaxy_tools|default(None) != None
    - galaxy_hg.stat.exists == True
    - galaxy_hg.stat.executable == False

# Import or create tool_conf files
- name: "Import base tool_conf.xml"
  copy:
    src='{{ galaxy_tool_conf_file }}'
    dest='{{ galaxy_root}}/config/tool_conf.xml'
  when: galaxy_tool_conf_file|default(None) != None

- name: "Create base tool_conf.xml from sample"
  copy:
    src='{{ galaxy_root }}/config/tool_conf.xml.sample'
    dest='{{ galaxy_root}}/config/tool_conf.xml'
    remote_src=yes
  when: galaxy_tool_conf_file|default(None) == None

- name: "Create empty shed_tool_conf.xml"
  copy:
    content='<?xml version="1.0"?>\n<toolbox tool_path="../shed_tools">\n</toolbox>\n'
    dest='{{ galaxy_root }}/config/shed_tool_conf.xml'
    force=no

- name: "Create empty local_tool_conf.xml"
  copy:
    content='<?xml version="1.0"?>\n<toolbox tool_path="../local_tools">\n</toolbox>\n'
    dest='{{ galaxy_root }}/config/local_tool_conf.xml'
    force=no

# Create/update the job_conf.xml file
# See https://wiki.galaxyproject.org/Admin/Config/Jobs
- name: Update Galaxy job_conf XML file
  template:
    dest='{{ galaxy_root }}/config/job_conf.xml'
    src=job_conf.xml.j2

# Create/update dependency_resolvers_conf.xml file
- name: "Update Galaxy dependency_resolvers_conf.xml"
  template:
    dest='{{ galaxy_root }}/config/dependency_resolvers_conf.xml'
    src='dependency_resolvers_conf.xml.j2'

# Create/update tool_data_table_conf.xml file
- name: Update tool_data_table_conf XML file
  template:
    dest='{{ galaxy_root }}/config/tool_data_table_conf.xml'
    src=tool_data_table_conf.xml.j2

# Create directory for chromosome length files
- name: Create directory for chromosome length files
  file:
    path='{{ galaxy_root }}/tool-data/shared/ucsc/chrom'
    state=directory
    mode='ugo+rX'

# Create 'unknown' chromosome length files '?.len'
- name: Create unknown chromosome length file
  copy:
    content=""
    dest='{{ galaxy_root }}/tool-data/shared/ucsc/chrom/?.len'
    force=no
  when: galaxy_chromosome_len_files|default(None) != None

# Install chromosome length (.len) files
- name: Install chromosome length files
  copy:
    src='{{ item }}'
    dest='{{ galaxy_root }}/tool-data/shared/ucsc/chrom/{{ item | basename }}'
    mode='ugo+r'
  with_items: "{{ galaxy_chromosome_len_files }}"
  when: galaxy_chromosome_len_files|default(None) != None

# Sanitization whitelist
- name: Add tools to sanitization whitelist
  lineinfile:
    path='{{ galaxy_root }}/{{ galaxy_sanitize_whitelist_file }}'
    state=present
    create=yes
    line="{{ item }}"
  with_items: "{{ galaxy_sanitize_whitelist_tools }}"
  when: galaxy_sanitize_whitelist_tools|default(None) != None

# Remove compiled .mako templates for Python 3 updates
# See https://docs.galaxyproject.org/en/release_20.01/admin/python.html
- name: "Remove compiled .mako templates"
  file:
    path: '{{ galaxy_root }}/database/compiled_templates/'
    state: absent
  when:
    - galaxy_python_version.startswith("3.")
    - galaxy_version == "release_20.01"

# Temp dirs for pip and yarn caches
- name: "Make temporary pip cache directory"
  tempfile:
    path: "{{ galaxy_installation_tmp_dir }}"
    prefix: "pip.cache."
    state: directory
  register: pip_cache_dir

- name: "Make temporary yarn cache directory"
  tempfile:
    path: "{{ galaxy_installation_tmp_dir }}"
    prefix: "yarn.cache."
    state: directory
  register: yarn_cache_dir

# Setup/update Galaxy
- name: "Run common_startup.sh to initialise/update Galaxy installation"
  command:
    chdir='{{ galaxy_root }}'
    ./scripts/common_startup.sh
  environment:
    PATH: '/usr/local/bin:{{ ansible_env.PATH }}'
    PIP_CACHE_DIR: '{{ pip_cache_dir.path }}'
    YARN_CACHE_FOLDER: '{{ yarn_cache_dir.path }}'

# Create or update Galaxy database
- name: "Check if Galaxy database exists"
  shell:
    "PGPASSWORD={{ galaxy_db_password }} psql -c '\\dt' '{{ galaxy_db }}' {{ galaxy_db_user }}"
  register: dbstatus

- name: "Initialise Galaxy database from SQL file"
  block:
    - name: "Make tmp directory for Galaxy DB SQL file"
      file:
        path: "{{ galaxy_install_dir }}/tmp"
        state: "directory"

    - name: "Bootstrap Galaxy database from template SQL"
      block:
        - name: "Copy default template Galaxy database SQL file"
          copy:
            src: 'galaxy_database-v153.sql'
            dest: '{{ galaxy_install_dir }}/tmp/galaxy_database.sql'
            remote_src: no
            force: yes

        - name: "Update Galaxy database user in template DB SQL"
          replace:
            path: '{{ galaxy_install_dir }}/tmp/galaxy_database.sql'
            regexp: "__GALAXY_DB_USER__"
            replace: "{{ galaxy_db_user }}"
      when: galaxy_new_db_sql|default(None) == None

    - name: "Copy user Galaxy database SQL file"
      copy:
        src: '{{ galaxy_new_db_sql }}'
        dest: '{{ galaxy_install_dir }}/tmp/galaxy_database.sql'
        remote_src: yes
        force: yes
      when: galaxy_new_db_sql|default(None) != None

    - name: "Import existing Galaxy database from SQL file"
      shell:
        "PGPASSWORD={{ galaxy_db_password }} psql -U {{ galaxy_db_user }} {{ galaxy_db}} < {{ galaxy_install_dir }}/tmp/galaxy_database.sql"

    - name: "Update the Galaxy database"
      command:
        cmd: "./manage_db.sh upgrade"
        chdir: "{{ galaxy_root }}"
  when: dbstatus.stdout == "No relations found." or dbstatus.stderr == "Did not find any relations."

- name: "Update existing Galaxy database"
  block:
    - name: "Dump Galaxy database SQL as a backup"
      shell:
        "PGPASSWORD={{ galaxy_db_password }} pg_dump -U {{ galaxy_db_user }} {{ galaxy_db}} > {{ galaxy_dir}}/backups/{{ galaxy_db }}.$(date +%Y-%m-%d-%H%M%S).sql"

    - name: "Get current database schema version"
      shell:
        "{{ galaxy_root }}/manage_db.sh db_version | tail -n 1"
      register: current_db_version

    - name: "Get new database schema version"
      shell:
        "{{ galaxy_root }}/manage_db.sh version | tail -n 1"
      register: new_db_version

    - name: "Report database schema versions"
      debug:
        msg: "DB schema versions: current {{ current_db_version.stdout }} -> new {{ new_db_version.stdout }}"

    - name: "Update the Galaxy database schema"
      command:
        cmd: "./manage_db.sh upgrade"
        chdir: '{{ galaxy_root }}'
      when: new_db_version.stdout|int > current_db_version.stdout|int

    # Not possible to downgrade database from a version that is
    # higher than the one supported by the current Galaxy release
    - name: "Downgrade the Galaxy database schema"
      fail:
        msg: "!!! Database schema needs to be downgraded manually from a higher Galaxy version using './manage_db.sh downgrade {{ new_db_version.stdout }}' but for this you need a newer version of Galaxy !!!"
      when: new_db_version.stdout|int < current_db_version.stdout|int
  when: dbstatus.stdout != "No relations found." and dbstatus.stderr != "Did not find any relations."

# Run monitor script to write basic (static) status page
- name: "Write status to static page periodically"
  cron:
    name: "{{ galaxy_name }} generate static status page"
    user: "{{ galaxy_user }}"
    weekday: "*"
    hour: "*"
    minute: "*/1"
    job: "/usr/local/bin/python3 /usr/local/bin/gx_monitor.py -c {{ galaxy_root }}/config/galaxy.yml --html -o {{ galaxy_root }}/static/status.html"
    state: present
  when: galaxy_generate_status_page == True

- name: "Disable static status page generation"
  cron:
    name: "{ galaxy_name }} generate static status page"
    state: absent
  when: galaxy_generate_status_page == False
