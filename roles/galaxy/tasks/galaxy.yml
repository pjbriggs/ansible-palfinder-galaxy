# Install and configure Galaxy
---
- name: "Halt running Galaxy"
  command:
    "{{ galaxy_utils_dir }}/bin/galaxyctl.sh stop {{ galaxy_name }}"

- name: Create top-level Galaxy directories
  file:
    path='{{ item }}'
    state=directory
  with_items:
  - '{{ galaxy_dir }}'
  - '{{ galaxy_tool_dependency_dir }}'
  - '{{ galaxy_ftp_upload_dir }}'
  - '{{ galaxy_dir }}/logs'
  - '{{ galaxy_dir }}/backups'

- name: Set Galaxy URL
  set_fact:
    galaxy_url: "{{ 'https' if enable_https else 'http' }}://{{ galaxy_server_name }}{{ galaxy_proxy_prefix }}/"

- name: Clone Galaxy source
  git:
    executable='/usr/local/bin/git'
    repo='{{ galaxy_repo }}'
    version='{{ galaxy_version }}'
    dest={{ galaxy_root }}
    force=yes

- name: Create additional Galaxy directories
  file:
    path='{{ item }}'
    state=directory
  with_items:
  - '{{ galaxy_file_path }}'

- name: Create welcome page
  template:
    dest='{{ galaxy_root }}/static/welcome.html'
    src='{{ galaxy_welcome_template }}'

- name: Import terms and conditions page
  copy:
    src='{{ galaxy_terms }}'
    dest='{{ galaxy_root }}/static/terms.html'
  when: galaxy_terms|default(None) != None

- name: Import citations page
  copy:
    src='{{ galaxy_citations }}'
    dest='{{ galaxy_root }}/static/citations.html'
  when: galaxy_citations|default(None) != None

- name: "Set up custom colours in SCSS file"
  replace:
    path: '{{ galaxy_root }}/client/galaxy/style/scss/theme/blue.scss'
    regexp: "^\\$({{ item.var }}): (.*);"
    replace: "${{ item.var }}: {{ item.value }};"
  with_items: "{{ galaxy_custom_scss }}"
  when: galaxy_custom_scss|default(None) != None

- name: Make virtualenv in Galaxy root
  command:
    chdir={{ galaxy_root }}
    {{ galaxy_python_dir }}/bin/virtualenv .venv -p {{ galaxy_python_dir }}/bin/python
    creates='{{ galaxy_root }}/.venv'

- name: Create Galaxy configuration file
  template:
    dest='{{ galaxy_root }}/config/galaxy.yml'
    src=galaxy-config.yml.j2

# Import or create tool_conf files
- name: "Import base tool_conf.xml"
  copy:
    src='{{ galaxy_tool_conf_file }}'
    dest='{{ galaxy_root}}/config/tool_conf.xml'
  when: galaxy_tool_conf_file|default(None) != None

- name: "Create base tool_conf.xml from sample"
  copy:
    src='{{ galaxy_root }}/config/tool_conf.xml.sample'
    dest='{{ galaxy_root}}/config/tool_conf.xml'
    remote_src=yes
  when: galaxy_tool_conf_file|default(None) == None

- name: "Create empty local_tool_conf.xml"
  copy:
    content='<?xml version="1.0"?>\n<toolbox tool_path="../local_tools">\n</toolbox>\n'
    dest='{{ galaxy_root }}/config/local_tool_conf.xml'
    force=no

# Create/update the job_conf.xml file
# See https://wiki.galaxyproject.org/Admin/Config/Jobs
- name: Update Galaxy job_conf XML file
  template:
    dest='{{ galaxy_root }}/config/job_conf.xml'
    src=job_conf.xml.j2

# Create/update dependency_resolvers.xml file
- name: "Update Galaxy dependency_resolvers.xml"
  template:
    dest='{{ galaxy_root }}/config/dependency_resolvers.xml'
    src='dependency_resolvers.xml.j2'

# Create/update tool_data_table_conf.xml file
- name: Update tool_data_table_conf XML file
  template:
    dest='{{ galaxy_root }}/config/tool_data_table_conf.xml'
    src=tool_data_table_conf.xml.j2

# Create directory for chromosome length files
- name: Create directory for chromosome length files
  file:
    path='{{ galaxy_root }}/tool-data/shared/ucsc/chrom'
    state=directory
    mode='ugo+rX'

# Create 'unknown' chromosome length files '?.len'
- name: Create unknown chromosome length file
  copy:
    content=""
    dest='{{ galaxy_root }}/tool-data/shared/ucsc/chrom/?.len'
    force=no
  when: galaxy_chromosome_len_files|default(None) != None

# Install chromosome length (.len) files
- name: Install chromosome length files
  copy:
    src='{{ item }}'
    dest='{{ galaxy_root }}/tool-data/shared/ucsc/chrom/{{ item | basename }}'
    mode='ugo+r'
  with_items: "{{ galaxy_chromosome_len_files }}"
  when: galaxy_chromosome_len_files|default(None) != None

# Sanitization whitelist
- name: Add tools to sanitization whitelist
  lineinfile:
    path='{{ galaxy_root }}/{{ galaxy_sanitize_whitelist_file }}'
    state=present
    create=yes
    line="{{ item }}"
  with_items: "{{ galaxy_sanitize_whitelist_tools }}"
  when: galaxy_sanitize_whitelist_tools|default(None) != None

# Setup/update Galaxy
- name: "Run common_startup.sh to initialise/update Galaxy installation"
  command:
    chdir='{{ galaxy_root }}'
    ./scripts/common_startup.sh
  environment:
    PATH: '/usr/local/bin:{{ ansible_env.PATH }}'

# Create or update Galaxy database
- name: "Check if Galaxy database exists"
  shell:
    "PGPASSWORD={{ galaxy_db_password }} psql -c '\\dt' '{{ galaxy_db }}' {{ galaxy_db_user }}"
  register: dbstatus

- name: "Run create_db.py to initialise the Galaxy database"
  command:
    chdir='{{ galaxy_root }}'
    .venv/bin/python scripts/create_db.py
  when: dbstatus.stdout == "No relations found."

- name: "Update existing Galaxy database"
  block:
    - name: "Dump Galaxy database SQL as a backup"
      shell:
        "PGPASSWORD={{ galaxy_db_password }} pg_dump -U {{ galaxy_db_user }} {{ galaxy_db}} > {{ galaxy_dir}}/backups/{{ galaxy_db }}.$(date +%Y-%m-%d-%H%M%S).sql"

    - name: "Update the Galaxy database"
      command:
        chdir='{{ galaxy_root }}'
        ./manage_db.sh upgrade
  when: dbstatus.stdout != "No relations found."
