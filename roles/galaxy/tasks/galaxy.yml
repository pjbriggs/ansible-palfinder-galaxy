# Install and configure Galaxy
---

- name: Create top-level Galaxy directories
  file:
    path='{{ item }}'
    state=directory
  with_items:
  - '{{ galaxy_dir }}'
  - '{{ galaxy_tool_dependency_dir }}'
  - '{{ galaxy_ftp_upload_dir }}'
  - '{{ galaxy_dir }}/logs'

- name: Set Galaxy URL
  set_fact:
    galaxy_url: "{{ 'https' if enable_https else 'http' }}://{{ galaxy_server_name }}{{ galaxy_proxy_prefix }}/"

- name: Clone Galaxy source
  git:
    executable='/usr/local/bin/git'
    repo='{{ galaxy_repo }}'
    version='{{ galaxy_version }}'
    dest={{ galaxy_root }}
    force=yes

- name: Create additional Galaxy directories
  file:
    path='{{ item }}'
    state=directory
  with_items:
  - '{{ galaxy_file_path }}'

- name: Create welcome page
  template:
    dest='{{ galaxy_root }}/static/welcome.html'
    src='{{ galaxy_welcome_template }}'

- name: Import terms and conditions page
  copy:
    src='{{ galaxy_terms }}'
    dest='{{ galaxy_root }}/static/terms.html'
  when: galaxy_terms|default(None) != None

- name: Import citations page
  copy:
    src='{{ galaxy_citations }}'
    dest='{{ galaxy_root }}/static/citations.html'
  when: galaxy_citations|default(None) != None

- name: Import base CSS styles file
  copy:
    src='{{ galaxy_base_css }}'
    dest='{{ galaxy_root }}/static/style/blue/base.css'
  when: galaxy_base_css|default(None) != None

- name: Make virtualenv in Galaxy root
  command:
    chdir={{ galaxy_root }}
    {{ galaxy_python_dir }}/bin/virtualenv .venv -p {{ galaxy_python_dir }}/bin/python
    creates='{{ galaxy_root }}/.venv'

- name: Check for sample YAML configuration file
  stat:
    path: '{{ galaxy_root }}/config/galaxy.yml.sample'
  register: galaxy_yml

- name: Create Galaxy YAML configuration file
  include: config_yaml.yml
  when: galaxy_yml.stat.exists == True

- name: Check for sample INI configuration file
  stat:
    path: '{{ galaxy_root }}/config/galaxy.ini.sample'
  register: galaxy_ini

- name: Create Galaxy INI configuration file
  include_tasks: config_ini.yml
  when: galaxy_ini.stat.exists == True

- name: Run common_startup.sh to initialise sample files and eggs/wheels
  command:
    chdir='{{ galaxy_root }}'
    ./scripts/common_startup.sh
  environment:
    PATH: '/usr/local/bin:{{ ansible_env.PATH }}'

- name: Run create_db.py to initialise the database
  command:
    chdir='{{ galaxy_root }}'
    .venv/bin/python scripts/create_db.py

# Update tool_conf.xml
- name: Update base tool_conf.xml
  copy:
    src='{{ galaxy_tool_conf_file }}'
    dest='{{ galaxy_root}}/config/tool_conf.xml'
  when: galaxy_tool_conf_file|default(None) != None

# Create/update the job_conf.xml file
# See https://wiki.galaxyproject.org/Admin/Config/Jobs
- name: Update Galaxy job_conf XML file
  template:
    dest='{{ galaxy_root }}/config/job_conf.xml'
    src=job_conf.xml.j2

# Create/update tool_data_table_conf.xml file
- name: Update tool_data_table_conf XML file
  template:
    dest='{{ galaxy_root }}/config/tool_data_table_conf.xml'
    src=tool_data_table_conf.xml.j2

# Sanitization whitelist
- name: Add tools to sanitization whitelist
  lineinfile:
    path='{{ galaxy_root }}/{{ galaxy_sanitize_whitelist_file }}'
    state=present
    create=yes
    line="{{ item }}"
  with_items: "{{ galaxy_sanitize_whitelist_tools }}"
  when: galaxy_sanitize_whitelist_tools|default(None) != None
