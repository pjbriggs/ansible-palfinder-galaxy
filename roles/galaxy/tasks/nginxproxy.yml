# Configure Nginx proxying
# See https://wiki.galaxyproject.org/Admin/Config/nginxProxy
---
# Remove old 'galaxy.conf' file
- name: "Check for legacy Nginx proxy file 'galaxy.conf'"
  stat:
    path: '{{ nginx_conf_dir }}/conf.d/galaxy.conf'
  register: 'legacy_conf_file'

- name: "Remove legacy Nginx proxy file 'galaxy.conf'"
  file:
    path='{{ nginx_conf_dir }}/conf.d/galaxy.conf'
    state='absent'
  when: legacy_conf_file.stat.exists == true

# Create conf file for Galaxy and put into Nginx conf.d/
- name: "Configure Nginx proxy"
  template:
    dest: "{{ nginx_conf_dir }}/conf.d/{{ galaxy_name }}.conf"
    src: nginx-galaxy.conf.j2
  notify:
  - Restart Nginx

# Need write permission on home so that static content
# can be read by Nginx proxy
- name: "Allow group read on Galaxy user home"
  file:
    path: "/home/{{ galaxy_user }}"
    mode: 'g+rx'
  become: yes
  become_user: '{{ galaxy_user }}'
  register: set_group_read_on_galaxy_home

# Required to allow Nginx to read static content
# from Galaxy's home directory
- name: "Add Nginx user to galaxy group"
  user:
    name: "{{ nginx_user }}"
    groups: '{{ nginx_group }},{{ galaxy_group }}'
  notify:
  - Restart Nginx

# Fix SELinux contexts for Galaxy content
- name: "Check if SELinux is enforcing"
  command:
    "getenforce"
  register: sestatus

- name: "Fix SELinux contexts for Galaxy content"
  block:

    - name: "Update SELinux contexts for static content"
      command:
        "semanage fcontext -a -t httpd_sys_content_t '{{ galaxy_root }}/static(/.*)?'"

    - name: "Apply updated SELinux contexts for static content"
      command:
        "restorecon -Rv {{ galaxy_root }}/static"

  when: '"Disabled" not in sestatus.stdout'

# Set up strong Diffie-Hellman group for TLS/SSL
- name: "Check for Diffie-Hellman parameter file"
  stat:
    path: "/etc/ssl/certs/dhparam.pem"
  register: dhparam_file

- name: "Create strong Diffie-Hellman parameter group"
  command: "openssl dhparam -out /etc/ssl/certs/dhparam.pem 2048"
  when: enable_https and dhparam_file.stat.exists == False

# Make sure that the .well-know directory exists for certbot
# Let's Encrypt client
- name: "Add certbot .well-known web directory"
  file:
    path: "{{ nginx_share_dir }}/html/.well-known"
    state: directory
  when: enable_https

# Force restart of nginx
- name: "Restart Nginx"
  service:
    name: "{{ nginx_service }}"
    state: reloaded
