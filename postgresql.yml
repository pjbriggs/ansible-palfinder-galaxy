# Install and configure PostgreSQL on remote server and set up
# database user and database for the Galaxy instance

---
# Set up the PostgreSQL server
- hosts: '{{ hosts }}'
  tasks:
  - name: Install PostgreSQL server
    yum: name={{item}} state=present
    with_items:
    - postgresql
    - postgresql-server
    - python-psycopg2
    register: postgresql_installed

  - name: Check if PostgreSQL is initialised
    stat: path=/var/lib/pgsql/data/postgresql.conf
    register: postgresql_conf

  # ansible wants us to use the 'service' module for
  # this but it doesn't work for 'initdb'
  - name: Initialise PostgreSQL cluster
    command:
      service postgresql initdb
    when: postgresql_conf.stat.exists == False
    register: postgresql_initialised

  - name: Start PostgreSQL service and enable on boot
    service:
      name=postgresql
      state=started
      enabled=yes
    when: postgresql_initialised | success
    register: postgresql_started

  - name: Update PostgreSQL authentication for postgres user
    lineinfile:
      dest=/var/lib/pgsql/data/pg_hba.conf
      line='local	all	    postgres			      ident'
      insertafter='^# "local" is for Unix domain socket connections only'
      backup=yes
    notify:
      Restart PostgreSQL

  - name: Update PostgreSQL authentication for all other usersq
    replace:
      dest=/var/lib/pgsql/data/pg_hba.conf
      regexp='^([^\s]+\s+all\s+all\s+.*)ident$'
      replace='\1md5'
    notify:
      Restart PostgreSQL

  handlers:
  - name: Restart PostgreSQL
    service: name=postgresql state=restarted

# Set up the Galaxy user and database
- hosts: '{{ hosts }}'
  become_user: postgres
  vars:
    - galaxy_user: galaxy
    - galaxy_db: galaxy_palfinder
  tasks:
  - name: Create PostgreSQL Galaxy user
    postgresql_user:
      name='{{ galaxy_user }}'
      password='{{ galaxy_user }}'
      role_attr_flags=NOSUPERUSER
      state=present
    when: postgresql_started | success
    register: postgresql_galaxy_user_created

  - name: Create PostgreSQL database
    postgresql_db:
      name='{{ galaxy_db }}'
      owner='{{ galaxy_user }}'
      state=present
    when: postgresql_galaxy_user_created | success
    register: postgresql_galaxy_db_created
